<!--

Simple Ant build file for building the project if Maven is not preferred.

Expects junit-4.8.2.jar to be present in the libs dir; the Maven build script does not.

-->
<project name="java-design-patterns" default="jar" basedir=".">
	
    <description>
    	Ant build.xml for building and testing the Java design pattern cook book.
    </description>	
	
    <!-- Directory structure -->
    <property name="src.dir" location="src"/>
    <property name="src.java.dir" location="${src.dir}/main/java"/>
	<property name="src.test.dir" location="${src.dir}/test/java"/>
	<property name="build.java.dir" location="build/java"/>
	<property name="build.test.dir" location="build/test"/>
    <property name="libs.dir" location="libs"/>
    <property name="resources.dir" location="resources"/>
    <property name="dist.dir" location="dist"/>
    	
    <target name="init" description="Grabs current time, creates the build dirs if needed">
        <tstamp>
            <format property="NOW_GB" pattern="yyyy-MMMM-dd-HHmm" locale="en,GB"/>
        </tstamp>
        <mkdir dir="${build.java.dir}"/>
        <mkdir dir="${build.test.dir}"/>
    </target>
	
    <target name="compile" depends="init" description="Compiles the main source" >
        <javac srcdir="${src.java.dir}" destdir="${build.java.dir}">
            <classpath>
                <fileset dir="${libs.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>
	
    <target name="compile-tests" depends="compile" description="Compiles the tests" >
        <javac srcdir="${src.test.dir}" destdir="${build.test.dir}">
            <classpath>
                <fileset dir="${libs.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            	<pathelement path="${build.java.dir}"/>
            </classpath>
        </javac>
    </target>
	
	<target name="test" depends="compile-tests">
		
        <mkdir dir="${dist.dir}/test-results"/>
		
    	<junit showoutput="yes" fork="true" printsummary="yes"  haltonfailure="yes">
    	    <classpath>
    	        <pathelement location="${libs.dir}/junit-4.8.2.jar"/>
    	    	<pathelement path="${build.java.dir}"/>
                <pathelement path="${build.test.dir}"/>
    	    </classpath>
    
    	    <formatter type="plain"/>
    	    <formatter type="xml"/>
    
    		<!-- expects JUnit4 annotations -->
    	    <batchtest todir="${dist.dir}/test-results/">
    	        <fileset dir="${src.test.dir}">
    	        </fileset>
    	    </batchtest>
    	</junit> 
    </target>

    <target name="jar" depends="test" description="Builds the .jar file" >
        <mkdir dir="${dist.dir}/lib"/>
        <!-- Put everything in ${build} into the ada-engine-${DSTAMP}.jar file - crude artefact versioning for now! -->
        <jar jarfile="${dist.dir}/lib/${ant.project.name}-${NOW_GB}.jar" basedir="${build.java.dir}"/>
    </target>
	
	<target name="jdoc" depends="jar" description="Builds the javadoc" >		
		<mkdir dir="${dist.dir}/jdoc"/>
		
		 <javadoc
		     destdir="${dist.dir}/jdoc"
		     author="true"
		     version="true"
		     use="true"
		     windowtitle="Java Design Patterns Cookbook">

		    <fileset dir="${src.dir}" defaultexcludes="yes">
		      <include name="main/java/com/gazbert/**"/>
		      <include name="test/java/com/gazbert/**"/>
		    </fileset>
		 	
		    <doctitle><![CDATA[<h1>Java Design Patterns Cookbook</h1>]]></doctitle>
        	
        </javadoc>
    </target>
	
    <target name="dist" depends="jdoc" description="Creates a .zip file of the distribution" >
    	
    	<mkdir dir="${dist.dir}/resources"/>
    	
        <copy todir="${dist.dir}/resources">
            <fileset dir="${resources.dir}" includes="**/*.properties"/>
        </copy>    	    	
    	
        <zip destfile="${dist.dir}/zip/${ant.project.name}.zip">
        	
    	    <zipfileset dir="${libs.dir}" prefix="libs"/>
            <zipfileset dir="${dist.dir}/resources" prefix="resources"/>
            <zipfileset dir="." includes="ada.sh"/>
        	
            <zipfileset dir="." includes="LICENSE"/>
            <zipfileset dir="." includes="README.md"/>
            	
            <zipfileset dir="${dist.dir}/lib" prefix="libs"/>  
        	
        	<zipfileset dir="${dist.dir}/jdoc" prefix="jdoc"/>
        </zip>
    </target>

    <target name="clean" description="Removes the .class files AND the .jar; it nukes build and dist dirs" >
        <delete dir="${build.java.dir}"/>
    	<delete dir="${build.test.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
	
</project>